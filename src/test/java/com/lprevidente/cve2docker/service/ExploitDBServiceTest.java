package com.lprevidente.cve2docker.service;

import com.lprevidente.cve2docker.TestBase;
import com.lprevidente.cve2docker.entity.pojo.ExploitDB;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;

import static org.junit.jupiter.api.Assertions.*;

public class ExploitDBServiceTest extends TestBase {

  @Autowired private ExploitDBService service;

  @Test
  public void singleCVE() {
    assertDoesNotThrow(
        () -> {
          ExploitDB exploitDB = service.getExploitDBFromSite(22894L);
          assertEquals("22894", exploitDB.getId());
          assertEquals("Linux", exploitDB.getPlatform());
          assertTrue(exploitDB.getType().equalsIgnoreCase("remote"));
          assertEquals("V9", exploitDB.getAuthor());
          assertNotNull(exploitDB.getIdVulnApp());
          assertEquals(
              "1527f94ba8538a2d029155844195bba8-gopher-3.0.5.tar.gz", exploitDB.getIdVulnApp());
        });
  }

  @Test
  public void doubleCVE() {
    assertDoesNotThrow(
        () -> {
          ExploitDB exploitDB = service.getExploitDBFromSite(4549L);
          assertEquals("4549", exploitDB.getId());
          assertEquals("PHP", exploitDB.getPlatform());
          assertTrue(exploitDB.getType().equalsIgnoreCase("webapps"));
          assertEquals("GoLd_M", exploitDB.getAuthor());
          assertNotNull(exploitDB.getIdVulnApp());
          assertEquals(
              "77174ae2818bd1d81f189d4abbc70ac1-release-0.8.tar.gz", exploitDB.getIdVulnApp());
        });
  }

  @Test
  public void noVulApps() {
    assertDoesNotThrow(
        () -> {
          ExploitDB exploitDB = service.getExploitDBFromSite(1L);
          assertEquals("1", exploitDB.getId());
          assertEquals("Windows", exploitDB.getPlatform());
          assertTrue(exploitDB.getType().equalsIgnoreCase("remote"));
          assertEquals("kralor", exploitDB.getAuthor());
          assertNull(exploitDB.getIdVulnApp());
        });
  }

  @Test
  public void noVerified() {
    assertDoesNotThrow(
        () -> {
          ExploitDB exploitDB = service.getExploitDBFromSite(49385L);
          assertEquals("49385", exploitDB.getId());
          assertEquals("Java", exploitDB.getPlatform());
          assertTrue(exploitDB.getType().equalsIgnoreCase("webapps"));
          assertEquals("1F98D", exploitDB.getAuthor());
          assertNull(exploitDB.getIdVulnApp());
        });
  }

  @Test
  public void noCVE() {
    assertDoesNotThrow(
        () -> {
          ExploitDB exploitDB = service.getExploitDBFromSite(49379L);
          assertEquals("49379", exploitDB.getId());
          assertEquals("Windows", exploitDB.getPlatform());
          assertTrue(exploitDB.getType().equalsIgnoreCase("local"));
          assertEquals("Mohammed Alshehri", exploitDB.getAuthor());
          assertNull(exploitDB.getIdVulnApp());
        });
  }
}
